{"version":3,"sources":["RadialChart.js","App.js","serviceWorker.js","index.js"],"names":["RadialChart","props","state","sqSize","this","radius","strokeWidth","viewBox","dashArray","Math","PI","dashOffset","percentage","width","height","className","cx","cy","r","transform","style","strokeDasharray","strokeDashoffset","stroke","progressColor","x","y","dy","textAnchor","fill","textColor","React","Component","defaultProps","coldColor","App","refreshData","bind","iterator","temperature","setState","defineColor","setInterval","a","fetch","then","response","status","Error","res","json","sensorsData","undefined","temperatureValue","e","interval","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAEMA,G,kBACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAOjB,IAAMC,EAASC,KAAKH,MAAME,OAEpBE,GAAUD,KAAKH,MAAME,OAASC,KAAKH,MAAMK,aAAe,EAExDC,EAAO,cAAUJ,EAAV,YAAoBA,GAE3BK,EAAYH,EAASI,KAAKC,GAAK,EAE/BC,EAAaH,EAAYA,EAAYJ,KAAKH,MAAMW,WAAa,GAEnE,OACE,yBACIC,MAAOT,KAAKH,MAAME,OAClBW,OAAQV,KAAKH,MAAME,OACnBI,QAASA,GACT,4BACEQ,UAAU,oBACVC,GAAIZ,KAAKH,MAAME,OAAS,EACxBc,GAAIb,KAAKH,MAAME,OAAS,EACxBe,EAAGb,EACHC,YAAW,UAAKF,KAAKH,MAAMK,YAAhB,QACb,4BACES,UAAU,kBACVC,GAAIZ,KAAKH,MAAME,OAAS,EACxBc,GAAIb,KAAKH,MAAME,OAAS,EACxBe,EAAGb,EACHC,YAAW,UAAKF,KAAKH,MAAMK,YAAhB,MAEXa,UAAS,qBAAgBf,KAAKH,MAAME,OAAS,EAApC,YAAyCC,KAAKH,MAAME,OAAS,EAA7D,KACTiB,MAAO,CACLC,gBAAiBb,EACjBc,iBAAkBX,EAClBY,OAAOnB,KAAKH,MAAMuB,iBAEtB,0BACET,UAAU,cACVU,EAAE,MACFC,EAAE,MACFC,GAAG,OACHC,WAAW,SACXR,MAAO,CAACS,KAAMzB,KAAKH,MAAM6B,YAN3B,UAQM1B,KAAKH,MAAMW,WARjB,e,GA1CcmB,IAAMC,YAyD9BhC,EAAYiC,aAAe,CACzB9B,OAAQ,IACRS,WAAY,EACZN,YAAa,IAEAN,QC3DXkC,EAAY,4BAGGC,E,YACnB,aAAc,IAAD,8BACX,+CACKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKnC,MACL,CACEoC,SAAU,EACV1B,WAAY,EACZY,cAAeU,EACfJ,UAAWI,GARF,E,yEAYDK,GACVnC,KAAKoC,SAAS,CACZF,SAAUlC,KAAKF,MAAMoC,SAAW,EAChC1B,WAAY2B,EACZf,cAAepB,KAAKqC,YAAYF,GAChCT,UAAW1B,KAAKqC,YAAYF,O,kCAIpBA,GACV,OAAOA,EAAc,EAAIL,EAzBX,+B,0CA4BI,IAAD,OACjB,IACEQ,YAAW,sBAAE,gCAAAC,EAAA,sEACOC,MAjCP,yCAiCyBC,MAAK,SAACC,GACxC,GAAwB,MAApBA,EAASC,OACX,MAAM,IAAIC,MAAM,iBAAmBF,GAErC,OAAOA,KALE,cACLG,EADK,gBAOeA,EAAIC,OAPnB,OAOLC,EAPK,YAScC,KADrBC,EAAmBF,EAAYZ,eAEjCc,EAAmB,GAErB,EAAKjB,YAAYiB,GAZN,2CAaV,KACH,MAAMC,GACNlD,KAAKgC,YAAY,M,6CAInBhC,KAAKmD,SAAW,O,+BAId,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKyC,GAAG,SACR,kBAAC,EAAD,CACElD,YAAY,KACZH,OAAO,MACPS,WAAYR,KAAKF,MAAMU,WACvBY,cAAepB,KAAKF,MAAMsB,cAC1BM,UAAW1B,KAAKF,MAAM4B,aAExB,yBAAK0B,GAAG,aAAR,cACYpD,KAAKF,MAAMoC,gB,GA/DFN,aCIbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.f36797dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass RadialChart extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {};\r\n    }\r\n  \r\n    render() {\r\n      // Size of the enclosing square\r\n      const sqSize = this.props.sqSize;\r\n      // SVG centers the stroke width on the radius, subtract out so circle fits in square\r\n      const radius = (this.props.sqSize - this.props.strokeWidth) / 2;\r\n      // Enclose cicle in a circumscribing square\r\n      const viewBox = `0 0 ${sqSize} ${sqSize}`;\r\n      // Arc length at 100% coverage is the circle circumference\r\n      const dashArray = radius * Math.PI * 2;\r\n      // Scale 100% coverage overlay with the actual percent\r\n      const dashOffset = dashArray - dashArray * this.props.percentage / 45;\r\n  \r\n      return (\r\n        <svg\r\n            width={this.props.sqSize}\r\n            height={this.props.sqSize}\r\n            viewBox={viewBox}>\r\n            <circle\r\n              className=\"circle-background\"\r\n              cx={this.props.sqSize / 2}\r\n              cy={this.props.sqSize / 2}\r\n              r={radius}\r\n              strokeWidth={`${this.props.strokeWidth}px`} />\r\n            <circle\r\n              className=\"circle-progress\"\r\n              cx={this.props.sqSize / 2}\r\n              cy={this.props.sqSize / 2}\r\n              r={radius}\r\n              strokeWidth={`${this.props.strokeWidth}px`}\r\n              // Start progress marker at 12 O'Clock\r\n              transform={`rotate(-90 ${this.props.sqSize / 2} ${this.props.sqSize / 2})`}\r\n              style={{\r\n                strokeDasharray: dashArray,\r\n                strokeDashoffset: dashOffset,\r\n                stroke:this.props.progressColor\r\n              }} />\r\n            <text\r\n              className=\"circle-text\"\r\n              x=\"50%\"\r\n              y=\"50%\"\r\n              dy=\".3em\"\r\n              textAnchor=\"middle\"\r\n              style={{fill: this.props.textColor}}\r\n              >\r\n              {`${this.props.percentage}Â°C`}\r\n            </text>\r\n        </svg>\r\n      );\r\n    }\r\n  }\r\n  \r\n  RadialChart.defaultProps = {\r\n    sqSize: 200,\r\n    percentage: 0,\r\n    strokeWidth: 10\r\n  };\r\n  export default RadialChart;","import React, { Component }  from 'react';\nimport './App.css';\nimport RadialChart from './RadialChart.js';\n\nconst apiEnpoint = 'http://localhost:52029/api/v2/sensors';\nconst coldColor = 'rgba(95, 255, 255, 0.801)';\nconst warmColor = 'rgba(255, 101, 101, 0.801)';\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.refreshData = this.refreshData.bind(this);\n    this.state = \n    {\n      iterator: 1,\n      percentage: 0,\n      progressColor: coldColor,\n      textColor: coldColor\n    };\n  }\n\n  refreshData(temperature)  {\n    this.setState({\n      iterator: this.state.iterator + 1,\n      percentage: temperature,\n      progressColor: this.defineColor(temperature),\n      textColor: this.defineColor(temperature)\n    });\n  }\n  \n  defineColor(temperature) {\n    return temperature < 0 ? coldColor : warmColor;\n  }\n\n  componentDidMount(){\n    try {\n      setInterval (async () => {\n        const res = await fetch(apiEnpoint).then((response) => {\n          if (response.status !== 200) {\n            throw new Error(\"Bad response: \" + response);\n          }\n          return response;\n      });\n        const sensorsData = await res.json();\n        var temperatureValue = sensorsData.temperature;\n        if (temperatureValue === undefined){\n          temperatureValue = 0;\n        }\n        this.refreshData(temperatureValue);\n      }, 10000);\n    } catch(e) {\n      this.refreshData(0);\n    }\n  }\n  componentWillUnmount(){\n    this.interval = null;\n  }\n  \n  render () {\n      return (        \n        <div className=\"App\">\n          <header className=\"App-header\">            \n            <div id=\"chart\">\n            <RadialChart\n              strokeWidth=\"10\"\n              sqSize=\"200\"\n              percentage={this.state.percentage}\n              progressColor={this.state.progressColor}\n              textColor={this.state.textColor}/>\n            </div>\n            <div id=\"iteration\">                          \n            Iteration: {this.state.iterator}\n          </div>\n          </header>\n          </div>\n      );\n    }\n}\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}